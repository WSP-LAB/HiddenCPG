#!/usr/bin/env python3

import os
from octopus.shelltool.DemuxTool import DemuxTool


DESCRIPTION = """Split file into different files using the first field
of each line as a key and create a table of contents. This is like
"awk -F, '{print > $1}'" but in cases where the key cannot be used as
a filename."""

DEFAULT_OUTPUT_DIR = 'out'

class Demux(DemuxTool):
    def __init__(self):
        DemuxTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-O', '--outputDir', help="""Directory to
        write to.""", nargs='?', default = DEFAULT_OUTPUT_DIR)

        self._initializeDefaults()

    def _initializeDefaults(self):
        self.currentFileNum = 0
        self.keyToFilename = dict()

    # @Override
    def streamStart(self):
        self._createOutputDir()

    def _createOutputDir(self):
        try:
            os.makedirs(self.args.outputDir + '/data/')
        except OSError:
            pass

        self.toc = open(self.args.outputDir + '/TOC', 'w')

    # @ Override
    def processLines(self):
        curKey = self.lines[0].split('\t')[0]

        f = self._openOutputFile(curKey)

        for line in self.lines:
            line = line.rstrip()
            record = line.split('\t')
            f.write('\t'.join(record[1:]) + '\n')
        f.close()

    def _openOutputFile(self, curKey):

        if curKey in self.keyToFilename:
            filename = self.keyToFilename[curKey]
        else:
            filename = self.args.outputDir + '/data/' + str(self.currentFileNum)
            self.currentFileNum += 1
            self.keyToFilename[curKey] = filename
            self.toc.write(curKey + '\n')

        return open(filename, 'a')

    # @Override
    def streamEnd(self):
        if self.lines != []:
            self.processLines()
        self.toc.close()

if __name__ == '__main__':
    tool = Demux()
    tool.run()
