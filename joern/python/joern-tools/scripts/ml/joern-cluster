#!/usr/bin/env python3

from joern.mlutils.EmbeddingLoader import EmbeddingLoader
from joern.shelltool.CmdLineTool import CmdLineTool
from scipy.spatial.distance import squareform


DESCRIPTION = """ Perform linkage clustering for embedded vectors """

DEFAULT_DIRNAME = 'embedding'

METRIC = 'cityblock'
MAX_DIST_IN_CLUSTER = 2.0
METHOD = 'average'

class JoernCluster(CmdLineTool):

    def __init__(self):
        CmdLineTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-d', '--dirname', nargs='?',
                                    type = str, help="""The directory containing the embedding""",
                                    default = DEFAULT_DIRNAME)

    def _runImpl(self):

        from fastcluster import linkage
        from scipy.cluster.hierarchy import fcluster
        from sklearn.metrics.pairwise import pairwise_distances

        loader = EmbeddingLoader()
        # Btw, we can have the loader do PCA here by passing
        # a second argument.
        self.emb = loader.load(self.args.dirname)
        if self.emb == None:
            return


        D = pairwise_distances(self.emb.x, metric=METRIC)
        D = squareform(D, checks=False)
        # import numpy
        # numpy.clip(D,0,1,D)

        try:
            Z = linkage(D, method=METHOD)
        except:
            # If clustering fails, just put
            # each datapoint into its own cluster.
            for i in range(len(self.emb.y)):
                label = long(self.emb.y[i])
                nodeId = self.emb.TOCLines[label]
                print str(nodeId) + '\t' + str(i + 1)
            return

        i = 0
        for x in fcluster(Z, MAX_DIST_IN_CLUSTER, criterion = 'distance'):
            label = long(self.emb.y[i])
            nodeId = self.emb.TOCLines[label]
            # nodeId '\t clusterId
            print str(nodeId) + '\t' + str(x)
            i += 1

if __name__ == '__main__':
    tool = JoernCluster()
    tool.run()
